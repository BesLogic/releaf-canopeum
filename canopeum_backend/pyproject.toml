# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
target-version = "py312"
line-length = 120
preview = true
# Auto-generated
exclude = ["canopeum_backend/migrations/*"]

[tool.ruff.lint]
select = ["ALL"]
# https://docs.astral.sh/ruff/rules/
ignore = [
  ###
  # Not needed or wanted
  ###
  "D1", # pydocstyle Missing doctring
  "D401", # pydocstyle: non-imperative-mood
  "EM", # flake8-errmsg
  "EXE", # flake8-executable
  # This is often something we can't control: https://github.com/astral-sh/ruff/issues/9497
  # Also false-positive with positional-only arguments: https://github.com/astral-sh/ruff/issues/3247
  "FBT003", # flake8-boolean-trap: boolean-positional-value-in-call
  "INP", # flake8-no-pep420
  "ISC003", # flake8-implicit-str-concat: explicit-string-concatenation
  # Short messages are still considered "long" messages
  "TRY003", # tryceratops : raise-vanilla-args
  # Don't remove commented code, also too inconsistant
  "ERA001", # eradicate: commented-out-code
  # contextlib.suppress is roughly 3x slower than try/except
  "SIM105", # flake8-simplify: use-contextlib-suppress
  # Negative performance impact
  "UP038", # non-pep604-isinstance
  # Checked by type-checker (pyright)
  "ANN", # flake-annotations
  "PGH003", # blanket-type-ignore
  "TCH", # flake8-type-checking
  # Already shown by Pylance, checked by pyright, and can be caused by overloads.
  "ARG002", # Unused method argument
  # We want D213: multi-line-summary-second-line and D211: no-blank-line-before-class
  "D203", # pydocstyle: one-blank-line-before-class
  "D212", # pydocstyle: multi-line-summary-first-line
  # Allow differentiating between broken (FIXME) and to be done/added/completed (TODO)
  "TD001", # flake8-todos: invalid-todo-tag

  ###
  # Conflict with formatter
  ###
  "COM812", # missing-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation

  ###
  # These should be warnings (https://github.com/astral-sh/ruff/issues/1256 & https://github.com/astral-sh/ruff/issues/1774)
  ###
  "FIX", # flake8-fixme
  # Not all TODOs are worth an issue, this would be better as a warning
  "TD003", # flake8-todos: missing-todo-link

  # False-positives
  "TCH004", # https://github.com/astral-sh/ruff/issues/3821

  ###
  # Specific to this project
  ###
  "CPY001", # flake8-copyright, using global copyright
  "D205", # Not all docstrings have a short description + desrciption
  "PERF203", # try-except-in-loop, Python 3.11, introduced "zero cost" exception handling
  "PLR6301", # API Views don't use "self"
  "TD002", # missing-todo-author, This is a relatively small, low contributors project. Git blame suffice.

  ### FIXME/TODO: I'd normally set them as temporarily warnings, but no warnings in Ruff yet:
  ### https://github.com/astral-sh/ruff/issues/1256 & https://github.com/astral-sh/ruff/issues/1774):
  "DJ001", # Avoid using `null=True` on string-based fields
  "DJ008", # Model does not define `__str__` method: https://docs.astral.sh/ruff/rules/django-model-without-dunder-str/
  "N803", # Different naming convention between js/json and python. A better/configured middleware could take care of that
]

# https://docs.astral.sh/ruff/settings/#flake8-implicit-str-concat
[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = false

# https://docs.astral.sh/ruff/settings/#isort
[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

# https://docs.astral.sh/ruff/settings/#mccabe
[tool.ruff.lint.mccabe]
# Arbitrary to 2 bytes, same as SonarLint
max-complexity = 15

[tool.ruff.lint.pylint]
# Arbitrary to 1 byte, same as SonarLint
max-args = 7
# At least same as max-complexity
max-branches = 15

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
pythonVersion = "3.12"
exclude = [".venv/"]
typeCheckingMode = "standard"
# django-specific mypy plugin does a better job getting serializers data type of dict vs list
reportAttributeAccessIssue = "none"

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
show_column_numbers = true
implicit_reexport = true
python_version = "3.12"
exclude = [".venv/"]

strict = false
# Implicit return types !
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disable_error_code = [
  "return", # Implicit return types
  "var-annotated", # Django models ClassVars not seen as annotated
]
# Note: mypy still has issues with some boolean infered returns like `is_valid_hwnd`
# https://github.com/python/mypy/issues/4409
# https://github.com/python/mypy/issues/10149

[[tool.mypy.overrides]]
# Untyped dependencies
module = ["rest_framework.*"]
ignore_missing_imports = true
